{"version":3,"file":"component---src-pages-search-tsx-999399c9c3d4ac47c080.js","mappings":"4PAQA,MAAMA,GAAIC,EAAAA,EAAAA,GAAA,QAAAC,OAAA,YAAAD,CAAA,uMAWYE,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,MAAM,GAAG,uCAGvDC,EAAAA,GAAAA,GAAa,wCAsBjB,MAXeC,IAAsC,IAArC,KAAEC,EAAI,SAAEC,GAAuBF,EAC7C,OACEG,EAAAA,EAAAA,IAACC,EAAAA,EAAa,CAACR,MAAOA,EAAAA,KACpBO,EAAAA,EAAAA,IAACE,EAAAA,GAAM,CAACC,OAAQC,EAAAA,KAChBJ,EAAAA,EAAAA,IAACK,EAAAA,EAAM,CAACP,KAAMA,KACdE,EAAAA,EAAAA,IAACX,EAAI,KAAEU,IACPC,EAAAA,EAAAA,IAACM,EAAAA,EAAM,MACO,E,oBC9BpB,MAAMC,GAASjB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,mCAGXM,EAAAA,GAAAA,GAAa,sBAKXY,GAAclB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAmB,KAAA,SAAAN,OAAA,qBAIdO,GAAUpB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAmB,KAAA,SAAAN,OAAA,6HAUVQ,GAAOrB,EAAAA,EAAAA,GAAA,MAAAC,OAAA,aAAAD,CAAA,0IAQSE,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,MAAM,IAAI,oDAIpCE,IAAA,IAAC,MAAEJ,GAAOI,EAAA,OAAKJ,EAAMC,OAAOkB,QAAQC,OAAO,yBAC3CC,IAAA,IAAC,MAAErB,GAAOqB,EAAA,OAAKrB,EAAMC,OAAOkB,QAAQC,OAAO,oCAsEnE,MAvDeE,IAIQ,IAHrBC,MACEC,mBAAmB,MAAEC,KAEPH,EAChB,MAAMI,EAAUC,EAAAA,SACd,IACEF,EAAMG,QACJ,CACEC,EAAgCC,KAM7B,IAJDC,MACEC,aAAa,KAAEC,KAERH,EASX,OAPAG,EAAKC,SAAQC,SACOC,IAAdP,EAAKM,GAAoBN,EAAKM,GAAO,EACpCN,EAAKM,IAAM,IAGlBN,EAAU,MAEHA,CAAI,GAEb,CAAEQ,IAAK,KAEX,IAEF,OACE9B,EAAAA,EAAAA,IAAC+B,EAAY,CAACjC,KAAMkC,EAAAA,EAAAA,SAClBhC,EAAAA,EAAAA,IAACO,EAAS,MACRP,EAAAA,EAAAA,IAACiC,EAAAA,GAAS,KAAC,WACXjC,EAAAA,EAAAA,IAACkC,EAAAA,GAAS,KAAC,eACXlC,EAAAA,EAAAA,IAACQ,EAAc,MACbR,EAAAA,EAAAA,IAACmC,EAAAA,GAAQ,CAACC,QAAM,EAACC,UAAW5C,EAAAA,GAAAA,OAAAA,QAAAA,SAA8B,WAG1DO,EAAAA,EAAAA,IAACU,EAAU,KACR4B,OAAOC,QAAQpB,GAASqB,KAAIC,IAAA,IAAEC,EAAKC,GAAMF,EAAA,OACxCzC,EAAAA,EAAAA,IAAC4C,EAAAA,KAAI,CAACC,GAAE,SAAWH,EAAOA,IAAKA,IAC7B1C,EAAAA,EAAAA,IAACW,EAAO,MACNX,EAAAA,EAAAA,IAACX,EAAAA,GAAI,CAAC+C,QAAM,EAACC,UAAW5C,EAAAA,GAAAA,OAAAA,KAAAA,MACrBiD,EAAI,KAAGC,EAAM,MAGb,OAKF,C","sources":["webpack://gparkkii-blog/./src/layout/SearchLayout.tsx","webpack://gparkkii-blog/./src/pages/search.tsx"],"sourcesContent":["import { Global, ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { globalStyle } from 'styles';\nimport Footer from 'components/Navigation/Footer';\nimport Header from 'components/Navigation/Header';\nimport { theme, mediaQuery } from 'theme/index';\n\nconst Body = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  min-height: calc(100vh - 80px); // minus footer height\n  height: 100%;\n  padding: 0px 40px;\n  padding-top: 72px; // padding to header height\n  margin: 0 auto;\n  background-color: ${({ theme }) => theme.colors.light[50]};\n  transition: all 0.5s ease-in-out;\n\n  ${mediaQuery.sm} {\n    padding: 40px 0px;\n    padding-top: 72px;\n  }\n`;\n\ntype SearchProps = {\n  path: string;\n  children: React.ReactNode;\n};\n\nconst Search = ({ path, children }: SearchProps) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Global styles={globalStyle} />\n      <Header path={path} />\n      <Body>{children}</Body>\n      <Footer />\n    </ThemeProvider>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { PATH } from '../routes/path';\nimport SearchLayout from '../layout/SearchLayout';\nimport { Body, Guidance1, Guidance2, Subtitle } from '../styles/typography';\nimport styled from '@emotion/styled';\nimport { mediaQuery, theme } from '../theme';\nimport { TagListProps } from '../components/Post/TagMenu';\nimport { PostType } from '../@types/Post.types';\nimport { Link, graphql } from 'gatsby';\n\nconst Container = styled.div`\n  max-width: 480px;\n  text-align: left;\n  ${mediaQuery.sm} {\n    max-width: 320px;\n  }\n`;\n\nconst KeywordWrapper = styled.div`\n  padding: 40px 0px;\n`;\n\nconst KeywordBox = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  padding-top: 12px;\n`;\n\nconst Keyword = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 30px;\n  margin: 8px 0px;\n  margin-right: 16px;\n  padding: 2px 12px;\n  border: 1px solid ${({ theme }) => theme.colors.light[300]};\n  border-radius: 100px;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.primary.default};\n    border: 1px solid ${({ theme }) => theme.colors.primary.default};\n    & p {\n      color: white !important;\n    }\n  }\n`;\n\ntype SearchPageProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostType[];\n    };\n  };\n};\n\nconst search = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}: SearchPageProps) => {\n  const tagList = React.useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: TagListProps['categories'],\n          {\n            node: {\n              frontmatter: { tags },\n            },\n          }: PostType,\n        ) => {\n          tags.forEach(tag => {\n            if (list[tag] === undefined) list[tag] = 1;\n            else list[tag]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n  return (\n    <SearchLayout path={PATH.search}>\n      <Container>\n        <Guidance1>안녕하세요,</Guidance1>\n        <Guidance2>무엇을 찾으시나요?</Guidance2>\n        <KeywordWrapper>\n          <Subtitle medium textColor={theme.colors.primary.default}>\n            추천 키워드\n          </Subtitle>\n          <KeywordBox>\n            {Object.entries(tagList).map(([key, value]) => (\n              <Link to={`/?tag=${key}`} key={key}>\n                <Keyword>\n                  <Body medium textColor={theme.colors.dark[100]}>\n                    {key} ({value})\n                  </Body>\n                </Keyword>\n              </Link>\n            ))}\n          </KeywordBox>\n        </KeywordWrapper>\n      </Container>\n    </SearchLayout>\n  );\n};\n\nexport default search;\n\nexport const searchContentQuery = graphql`\n  query searchContentQuery {\n    allMarkdownRemark(\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            tags\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 700)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Body","_styled","target","_ref","theme","colors","light","mediaQuery","_ref2","path","children","___EmotionJSX","ThemeProvider","Global","styles","globalStyle","Header","Footer","Container","KeywordWrapper","name","KeywordBox","Keyword","primary","default","_ref3","_ref4","data","allMarkdownRemark","edges","tagList","React","reduce","list","_ref5","node","frontmatter","tags","forEach","tag","undefined","All","SearchLayout","PATH","Guidance1","Guidance2","Subtitle","medium","textColor","Object","entries","map","_ref6","key","value","Link","to"],"sourceRoot":""}