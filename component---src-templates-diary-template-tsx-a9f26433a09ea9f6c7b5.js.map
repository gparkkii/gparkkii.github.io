{"version":3,"file":"component---src-templates-diary-template-tsx-a9f26433a09ea9f6c7b5.js","mappings":"yLAsDA,UAhC6D,SAAAA,GAKtC,IALgD,KACrEC,EAAI,KACJC,EAAI,YACJC,EAAW,SACXC,GACmBJ,EACnB,MACEK,MAAM,KACJC,EACAC,aAAa,MAAEC,EAAK,QAAEC,EAAO,KAAEC,EAAI,MAAEC,EAAK,OAAEC,KAE5CV,EAAKW,kBAAkBC,MAAM,GAEjC,OACEC,EAAAA,EAAAA,IAACC,EAAAA,EAAU,CACTf,KAAM,SACNgB,KAAM,CACJT,QACAU,YAAaT,EACbU,IAAKf,EAASgB,KACdC,MAAO,MAGTN,EAAAA,EAAAA,IAACO,EAAAA,EAAU,MACTP,EAAAA,EAAAA,IAACQ,EAAAA,EAAW,CAACf,MAAOA,EAAOE,KAAMA,KACjCK,EAAAA,EAAAA,IAACS,EAAAA,EAAgB,CAACC,wBAAyB,CAAEC,OAAQpB,MACrDS,EAAAA,EAAAA,IAACY,EAAAA,EAAa,OAItB,C","sources":["webpack://gparkkii-blog/./src/templates/diary_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport BaseLayout from 'layout/BaseLayout';\nimport PostLayout from 'layout/PostLayout';\nimport ContentHead from 'components/Detail/ContentHead';\nimport CommentWidget from 'components/Detail/CommentWidget';\nimport { MarkdownRenderer } from 'components/Detail/styles/code.styles';\nimport { DiaryPageItemType } from 'types/Post.types';\nimport { graphql } from 'gatsby';\n\ntype DiaryTemplateProps = {\n  path: string;\n  data: {\n    allMarkdownRemark: {\n      edges: DiaryPageItemType[];\n    };\n  };\n  pageContext: unknown;\n  location: {\n    href: string;\n  };\n};\n\nconst DiaryTemplate: FunctionComponent<DiaryTemplateProps> = function ({\n  path,\n  data,\n  pageContext,\n  location,\n}: DiaryTemplateProps) {\n  const {\n    node: {\n      html,\n      frontmatter: { title, summary, date, index, update },\n    },\n  } = data.allMarkdownRemark.edges[0];\n\n  return (\n    <BaseLayout\n      path={'/diary'}\n      meta={{\n        title,\n        description: summary,\n        url: location.href,\n        image: '',\n      }}\n    >\n      <PostLayout>\n        <ContentHead title={title} date={date} />\n        <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n        <CommentWidget />\n      </PostLayout>\n    </BaseLayout>\n  );\n};\n\nexport default DiaryTemplate;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY년 MM월 DD일 HH:mm\")\n            index\n            update\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","path","data","pageContext","location","node","html","frontmatter","title","summary","date","index","update","allMarkdownRemark","edges","___EmotionJSX","BaseLayout","meta","description","url","href","image","PostLayout","ContentHead","MarkdownRenderer","dangerouslySetInnerHTML","__html","CommentWidget"],"sourceRoot":""}