{"version":3,"file":"component---src-templates-post-template-tsx-306e179c357410050a68.js","mappings":"6PAWA,MAAMA,GAAYC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,yFAOdE,EAAAA,GAAAA,GAAa,yBAyBjB,MApBoBC,IAA4C,IAA3C,UAAEC,EAAS,KAAEC,GAAwBF,EACxD,OACEG,EAAAA,EAAAA,IAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,IAACP,EAAY,MACXO,EAAAA,EAAAA,IAACE,EAAAA,EAAW,CACVC,MAAO,CACLC,OAAQ,QACRC,UAAW,UACXC,aAAc,QAEhBC,QAAQ,OACRC,MAAOV,EACPW,IAAI,gBAGRT,EAAAA,EAAAA,IAACU,EAAAA,EAAgB,CAACC,wBAAyB,CAAEC,OAAQb,KACpD,E,UCnCP,MAAMc,GAAOnB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAoB,KAAA,SAAAC,OAAA,iHAUPC,GAAWtB,EAAAA,EAAAA,GAAA,KAAAC,OAAA,YAAAD,CAAA,6GAMKG,IAAA,IAAC,MAAEoB,GAAOpB,EAAA,OAAKoB,EAAMC,OAAOC,QAAQ,IAAI,cACnDC,IAAA,IAAC,MAAEH,GAAOG,EAAA,OAAKH,EAAMC,OAAOC,QAAQE,OAAO,oFAMzCC,IAAA,IAAC,MAAEL,GAAOK,EAAA,OAAKL,EAAMC,OAAOC,QAAQE,OAAO,sEAwCxD,MAvBmBE,IAA0C,IAAzC,KAAEC,EAAI,SAAEC,GAA2BF,EACrD,OACEvB,EAAAA,EAAAA,IAACa,EAAO,MACNb,EAAAA,EAAAA,IAAA,WACgB,OAAbyB,IACCzB,EAAAA,EAAAA,IAACgB,EAAW,CAACU,KAAMD,EAASE,OAAOC,OACjC5B,EAAAA,EAAAA,IAAA,gBAAW,MACVyB,EAASI,YAAYC,SAI5B9B,EAAAA,EAAAA,IAAA,WACY,OAATwB,IACCxB,EAAAA,EAAAA,IAACgB,EAAW,CAACU,KAAMF,EAAKG,OAAOC,MAC5BJ,EAAKK,YAAYC,OAClB9B,EAAAA,EAAAA,IAAA,YAAM,KAAY,OAIhB,ECSd,MA5C2D,SAAAH,GAKrC,IAL+C,KACnEkC,EAAI,KACJC,EAAI,YACJC,EAAW,SACXC,GACkBrC,EAClB,MAAM,SAAE4B,EAAQ,KAAED,GAASS,GAEzBE,MAAM,KACJpC,EAAI,gBACJqC,EACAP,aAAa,MACXC,EAAK,QACLO,EAAO,KACPC,EAAI,KACJC,EACAzC,WACE0C,iBAAiB,gBAAEC,GAAiB,UACpCC,MAIJV,EAAKW,kBAAkBC,MAAM,GAEjC,OACE5C,EAAAA,EAAAA,IAAC6C,EAAAA,EAAU,CACTd,KAAM,IACNe,KAAM,CACJhB,QACAiB,YAAaV,EACbW,IAAKd,EAASR,KACdlB,MAAOkC,KAGT1C,EAAAA,EAAAA,IAACiD,EAAAA,EAAU,MACTjD,EAAAA,EAAAA,IAACkD,EAAAA,EAAW,CAACpB,MAAOA,EAAOQ,KAAMA,KACjCtC,EAAAA,EAAAA,IAACmD,EAAW,CAACpD,KAAMA,EAAMD,UAAW2C,KACpCzC,EAAAA,EAAAA,IAACoD,EAAU,CAAC3B,SAAUA,EAAUD,KAAMA,KACtCxB,EAAAA,EAAAA,IAACqD,EAAAA,EAAa,OAItB,C","sources":["webpack://gparkkii-blog/./src/components/Detail/ContentBody.tsx","webpack://gparkkii-blog/./src/components/Detail/ContentNav.tsx","webpack://gparkkii-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport { mediaQuery } from 'theme/index';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport { MarkdownRenderer } from './styles/code.styles';\n\ninterface ContentBodyProps {\n  html: string;\n  thumbnail: IGatsbyImageData;\n}\n\nconst ImageWrapper = styled.div`\n  margin: 0 auto;\n  margin-bottom: 60px;\n  border-radius: 20px;\n  overflow: hidden;\n  isolation: isolate;\n\n  ${mediaQuery.sm} {\n    margin-bottom: 40px;\n  }\n`;\n\nconst ContentBody = ({ thumbnail, html }: ContentBodyProps) => {\n  return (\n    <>\n      <ImageWrapper>\n        <GatsbyImage\n          style={{\n            height: '328px',\n            objectFit: 'contain',\n            borderRadius: '20px',\n          }}\n          loading=\"lazy\"\n          image={thumbnail}\n          alt=\"thumbnail\"\n        />\n      </ImageWrapper>\n      <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </>\n  );\n};\n\nexport default ContentBody;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport { PageContextType } from '../../@types/Post.types';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  margin-top: 120px;\n`;\n\nconst ContentLink = styled.a`\n  display: inline-block;\n  padding: 10px 12px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  background-color: ${({ theme }) => theme.colors.primary[600]};\n  color: ${({ theme }) => theme.colors.primary.default};\n  transition: all 0.3s ease-in-out;\n\n  & span {\n    font-weight: 400;\n    font-size: 12px;\n    color: ${({ theme }) => theme.colors.primary.default};\n  }\n\n  &:hover {\n    transform: scale(1.025);\n  }\n\n  &:active {\n    transform: scale(1);\n  }\n`;\n\ninterface ContentNavProps {\n  previous: PageContextType;\n  next: PageContextType;\n}\n\nconst ContentNav = ({ next, previous }: ContentNavProps) => {\n  return (\n    <Wrapper>\n      <nav>\n        {previous !== null && (\n          <ContentLink href={previous.fields.slug}>\n            <span>{`<`}&nbsp;&nbsp;</span>\n            {previous.frontmatter.title}\n          </ContentLink>\n        )}\n      </nav>\n      <nav>\n        {next !== null && (\n          <ContentLink href={next.fields.slug}>\n            {next.frontmatter.title}\n            <span>&nbsp;&nbsp;{`>`}</span>\n          </ContentLink>\n        )}\n      </nav>\n    </Wrapper>\n  );\n};\n\nexport default ContentNav;\n","import React, { FunctionComponent } from 'react';\nimport BaseLayout from 'layout/BaseLayout';\nimport PostLayout from 'layout/PostLayout';\nimport ContentHead from 'components/Detail/ContentHead';\nimport ContentBody from 'components/Detail/ContentBody';\nimport CommentWidget from 'components/Detail/CommentWidget';\nimport ContentNav from 'components/Detail/ContentNav';\nimport TableOfContents from 'components/Detail/TableOfContents';\nimport { PostPageItemType, PageContextType } from 'types/Post.types';\nimport { graphql } from 'gatsby';\n\ntype PostTemplateProps = {\n  path: string;\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[];\n    };\n  };\n  pageContext: {\n    slug: string;\n    previous: PageContextType | null;\n    next: PageContextType | null;\n  };\n  location: {\n    href: string;\n  };\n};\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  path,\n  data,\n  pageContext,\n  location,\n}: PostTemplateProps) {\n  const { previous, next } = pageContext;\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        tags,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = data.allMarkdownRemark.edges[0];\n\n  return (\n    <BaseLayout\n      path={'/'}\n      meta={{\n        title,\n        description: summary,\n        url: location.href,\n        image: publicURL,\n      }}\n    >\n      <PostLayout>\n        <ContentHead title={title} date={date} />\n        <ContentBody html={html} thumbnail={gatsbyImageData} />\n        <ContentNav previous={previous} next={next} />\n        <CommentWidget />\n      </PostLayout>\n    </BaseLayout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY년 MM월 DD일 HH:mm\")\n            tags\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["ImageWrapper","_styled","target","mediaQuery","_ref","thumbnail","html","___EmotionJSX","React","GatsbyImage","style","height","objectFit","borderRadius","loading","image","alt","MarkdownRenderer","dangerouslySetInnerHTML","__html","Wrapper","name","styles","ContentLink","theme","colors","primary","_ref2","default","_ref3","_ref4","next","previous","href","fields","slug","frontmatter","title","path","data","pageContext","location","node","tableOfContents","summary","date","tags","childImageSharp","gatsbyImageData","publicURL","allMarkdownRemark","edges","BaseLayout","meta","description","url","PostLayout","ContentHead","ContentBody","ContentNav","CommentWidget"],"sourceRoot":""}